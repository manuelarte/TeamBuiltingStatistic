buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "ru.d10xa:gradle-allure-plugin:0.5.5"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.facet' version '3.3.0'
    id 'nebula.lint' version '6.3.0'
    id 'org.sonarqube' version '2.2.1'
    id 'org.springframework.boot' version '1.4.3.RELEASE'
}

ext {
    javaVersion = '1.8'
    snippetsDir = file('build/generated-snippets')
}

group 'org.manuel.teambuilting'
version '0.1.0-SNAPSHOT'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'ru.d10xa.allure'

jar {
    baseName = "${microserviceName}"
    version = project.version
}

facets {
    integrationTest {
        parentSourceSet = 'main'
        testTaskName = 'integrationTest'
        includeInCheckLifecycle = false
    }
}

allure {
    clean = false
    allureReportDir = "$buildDir/reports/allure"
}

test {
    outputs.dir snippetsDir
}

integrationTest {
    outputs.dir snippetsDir
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    agent
    all {
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
    }
}

repositories {
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-amqp")

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-web-services')
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }

    compile('javax.inject:javax.inject:1')

    compile("ch.qos.logback:logback-core:${logbackVersion}")
    compile("ch.qos.logback:logback-classic:${logbackVersion}")
    compile("net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}")

    // Persistence
    compile("mysql:mysql-connector-java:${mysqlConnectorVersion}")
    compile("org.hibernate:hibernate-envers:${hibernateVersion}")
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    // Including also entitymanager, see http://goo.gl/MzWDlo, error happening running 'dev' profile.
    compile("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    compile("com.zaxxer:HikariCP:${hikariVersion}")
    compile("org.liquibase:liquibase-core:${liquibaseVersion}")

    compileOnly('org.projectlombok:lombok')

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.hamcrest:hamcrest-core:1.3'

    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
    integrationTestCompile 'org.springframework.amqp:spring-rabbit-test:1.6.6.RELEASE'
    integrationTestCompile group: 'junit', name: 'junit', version: '4.11'
    integrationTestCompile 'org.hamcrest:hamcrest-core:1.3'
    integrationTestRuntime "org.hsqldb:hsqldb:2.3.2"
}

bootRun {
    systemProperties 'user.timezone': 'UTC'

    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split('\\s+') as java.util.List)
    }
}

clean {
    delete 'log'
    delete 'bin'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pfd'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task stage {
    dependsOn build
}